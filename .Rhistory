rect(xleft=11700, xright=0, ybottom=par('usr')[3], ytop=par("usr")[4],
col="white")
text(x=c(mean(rev(stadAge)[c(1,2)]),
mean(rev(stadAge)[c(5,8)]),
mean(rev(stadAge)[c(8,14)]),
mean(c(0, 11700))),
y=0.5, labels=c("Stad", "Stad", "Inter", "Holocene"), cex=0.75, col=rgb(0.5,0.5,0.5,0.75))
box()
close.screen(all.screens=TRUE)
dev.off()
pdf("./plots/trendsOverTimeRawFamily.pdf", height=5.5, width=7)
xlims=c(28500,-1750)
ylim=rbind(c(-0.25,0.2),
c(-0.05,0.05))
braceHeight = 1
contCol = c("blue","darkgreen")
tempCol = c(rgb(colorRamp(c("blue", "red"))(1)/255),
rgb(colorRamp(c('darkgreen', "red"))(1)/255))
contAlpha = col2rgb(contCol)/255
contAlpha = apply(contAlpha, 2, function(x){rgb(x[1],x[2],x[3],0.25)})
split.screen(rbind(t(replicate(2, c(0.12,0.9,0.565,0.99))), # TP1 Europe
t(replicate(2, c(0.12,0.9,0.1,0.525))),
c(0.12,0.9,0.525,0.565))) # TP2 Europe
sapply(1:2, function(n){
tempAxis = n
yAxis = ylim[tempAxis,]
print(n)
# each odd screen sets up the global temp underlay
screen(n + 1 * (n-1))
par(mar=c(0,0,0,0), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)
plot(NULL, xlim=xlims, ylim=c(-1,13), xlab="", ylab="", axes=FALSE, xaxs="i")
rect(xright=10000,
xleft=0,
ybottom=par("usr")[3], ytop=relative.axis.point(braceHeight, "y"),
col="grey90", border="black", lty="31")
if(n==1){
text(x=mean(c(0,10000)), y=relative.axis.point(0.065, "y"), lheight=0.75,
labels="Ellis et al. 2021\nanthrome coverage", col="black", font=1, cex=0.8)
}
lines(y=tempPred[[1]]$fit, x=(tempPred[[1]]$age * 1000), col=tempCol[1], lwd=1.5, lty="31")
text(y=tempPred[[1]]$fit[1], x=tempPred[[1]]$age[1]*1000, labels="Europe\ntemp",
col=tempCol[1], pos=4)
lines(y=tempPred[[2]]$fit, x=(tempPred[[2]]$age * 1000), col=tempCol[2], lwd=1.5, lty="31")
text(y=tempPred[[2]]$fit[1], x=tempPred[[2]]$age[1]*1000, labels="Nth Am\ntemp",
col=tempCol[2], pos=4)
box()
# only put axis if it's a right-hand plot
axis(side=4, col="red", col.ticks="red", col.axis="red")
if(n==1){
mtext(side=4, line=1.5, at=par("usr")[3], text="Global temperature anomaly", col="red", las=0)
mtext(side=4, line=2.5, at=par("usr")[3], text=expression("("*Delta*degree*"C from 1961-1990 mean)"), col="red", las=0)
}
close.screen(n + 1 * (n-1))
screen(n + 1 * (n-1) + 1)
par(mar=c(0,0,0,0), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)
plot(NULL, xlim=xlims, ylim=yAxis, xlab="", ylab="", axes=FALSE, xaxs="i")
yHeight = diff(par("usr")[3:4])
abline(h=0, lty="31", col="grey")
if(n == 2){
axis(side=1, at=seq(5000,25000,5000), labels=format(seq(5000,25000,5000), big.mark=","), mgp=c(3,0.2,0))
axis(side=1, at=0, labels=0, mgp=c(3,0.2,0))
axis(side=3, at=seq(0,25000,5000), labels=NA, mgp=c(3,0.2,0), tcl=0.25)
axis(side=3, at=seq(0,25000,1000), labels=NA, tcl=0.125)
mtext(side=1, line=1.5, text="Years before 1950AD")
} else {axis(side=1, at=seq(0,25000,5000), labels=NA)}
axis(side=1, at=seq(0,25000,1000), labels=NA, tcl=-0.125)
axis(side=2)
if(n==1){
mtext(side=2, line=3, at=par("usr")[3], text="Assemblage persistence axes", las=0, font=2)
}
if(n == 1){
mtext(side=2, line=2, text="PC1: Persistence", las=0)
} else {
mtext(side=2, line=2, text="PC2: State attractor strength", las=0)
}
# plot observed
if(n == 1){obs = timeMean} else {obs = timeMean2}
with(obs[obs$REGION == "Europe",], {
lines(fit ~ age, lwd=2, col=contCol[1])
polygon(x=c(age, rev(age)),
y=c(lci, rev(uci)), border=NA, col=contAlpha[1])
text(y=fit[1], x=age[1], labels="Europe", col=contCol[1], pos=4)
})
with(obs[obs$REGION == "North America",], {
lines(fit ~ age, lwd=2, col=contCol[2])
polygon(x=c(age, rev(age)),
y=c(lci, rev(uci)), border=NA, col=contAlpha[2])
text(y=fit[1], x=age[1], labels="North\nAmerica", col=contCol[2], pos=4)
})
text(x=relative.axis.point(0.01, "x"),
y=relative.axis.point(0.935, "y"),
labels=paste0("(", LETTERS[c(1:2)][n], ")"), font=2, adj=0)
arrowLabs = list(c("More\ntransient", "More\npersistent"),
c("Repulsor\nstate", "Attractor\nstate"))[[n]]
Arrows(y0=0, y1= 0 + (c(-0.15, 0.15) * c(1,0.35)[n]),
x0=relative.axis.point(0.06, "x"), x1=relative.axis.point(0.06, "x"),
arr.type="triangle", col="grey80", arr.width=0.1, arr.length=0.1, lwd=2)
text(y=0 + (c(-0.15, 0.15) * c(1,0.35)[n]), x=relative.axis.point(0.06, "x"),
pos=c(1,3), adj=0,
labels=arrowLabs,
font=3, col="grey80", cex=0.8)
close.screen(n + 1 * (n-1) + 1)
})
screen(5)
par(mar=c(0,0,0,0), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)
plot(NULL, xlim=xlims, ylim=c(0,1), axes=FALSE, xlab="", ylab="", xaxs="i")
stad <- read.csv("./rawdata/stadial.csv")
stad$age <- as.numeric(gsub(",", "", stad$age))
stadAge = c(11700, stad$age, 25000)
statCat = as.factor(c(stad$cat, "stadial"))
rect(xleft=stadAge[-1], xright=stadAge[-length(stadAge)],
ybottom=par('usr')[3], ytop=par("usr")[4],
col=c("white", "grey")[statCat], border=NA)
rect(xleft=11700, xright=0, ybottom=par('usr')[3], ytop=par("usr")[4],
col="white")
text(x=c(mean(rev(stadAge)[c(1,2)]),
mean(rev(stadAge)[c(5,8)]),
mean(rev(stadAge)[c(8,14)]),
mean(c(0, 11700))),
y=0.5, labels=c("Stad", "Stad", "Inter", "Holocene"), cex=0.75, col=rgb(0.5,0.5,0.5,0.75))
box()
close.screen(all.screens=TRUE)
dev.off()
############################ ####
rData <- readRDS("./outputs/recentTrajectoryDataFamily.rds")
rDatasetID = rData[!duplicated(rData$datasetid),]
# run persistence PCA
testTPMat = rData[, grepl("dn1", colnames(rData))]
testTPMat = testTPMat[, 1:3]
rData = rData[complete.cases(testTPMat),]
testTPMat = testTPMat[complete.cases(testTPMat),]
#tpResPCA = princomp(sapply(testTPMat, function(x){logit(beta.tr(x))}))
tpResPCA = princomp(sapply(testTPMat, function(x){x}))
tpVals = tpResPCA$sdev^2 / sum(tpResPCA$sdev^2)
# reverse first axis if loadings are positive so higher values = more persistent
if(sum(tpResPCA$loadings[,1] > 0) == ncol(testTPMat)){
tpResPCA$scores[,1] = tpResPCA$scores[,1] * -1
tpResPCA$loadings[,1] = tpResPCA$loadings[,1] * -1
}
# reverse second axis if late time dissimilarities are positive so
# higher values = more late persistence, reflecting of an "attractor state"
if(tpResPCA$loadings[1,2] < 0 & tpResPCA$loadings[3,2] > 0 ){
tpResPCA$scores[,2] = tpResPCA$scores[,2] * -1
tpResPCA$loadings[,2] = tpResPCA$loadings[,2] * -1
}
print(tpResPCA$loadings)
tpComb = data.frame(tpPC1 = tpResPCA$scores[,1],
tpPC2 = tpResPCA$scores[,2])
rData = cbind(rData, tpComb)
#           Add modern population density ####
library(terra)
popDens = rast("/Users/uqtstapl/Downloads/gpw-v4-population-density-rev11_totpop_2pt5_min_nc/gpw_v4_population_density_rev11_2pt5_min.nc")
rData$popDens = extract(popDens, rData[,c("long","lat")])[,2]
#           Ellis Anthrome pop dens estimates ####
ellis <- read_sf("/Users/uqtstapl/Downloads/Anthromes-12k-DGG/an12_dgg_inputs.shp")
ellisData = read.csv("~/Downloads/dataverse_files/an12_dgg_baseline.csv")
ellisCat = data.frame(ellisID = c(11, 12, 21, 22, 23, 24, 31, 32, 33, 34,
41, 42, 43, 51, 52, 53, 54, 61, 62, 63, 70),
ellisName = c("Urban", "Mixed settlements", "Rice villages",
"Irrigated villages", "Rainfed villages", "Pastoral villages",
"Residential irrigated croplands", "Residential rainfed croplands",
"Populated croplands", "Remote croplands", "Residental rangelands",
"Populated rangelands", "Remote rangelands", "Residential woodlands",
" Populated woodlands", "Remote woodlands", "Inhabited drylands",
"Wild woodlands", "Wild drylands", "Ice, uninhabited", "No land"),
ellisClass = c("urban", rep("village", 5), rep("cropland", 4),
rep("rangeland", 3), rep("woodland", 4),
rep("woodland", 2), "ice", "no land"),
ellisPopDens = c(5000,
rep(2500, 5),
100, 100, 10, 1,
100, 10, 1,
100, 10, 1, 1,
0, 0, 0, 0))
rDataCoords = rData[!duplicated(rData$datasetid),c("long", "lat")]
c = st_as_sf(rDataCoords, coords=c("long", "lat"))
c = st_set_crs(c, st_crs(ellis))
rDataEllisID = st_intersects(c, ellis$geometry)
rDataEllisID = as.data.frame(rDataEllisID)
rDataEllisID$datasetid = unique(rData$datasetid)[rDataEllisID$row.id]
colnames(rDataEllisID) = c("id", "ellisID", "datasetid")
rData = merge(rData, rDataEllisID[,c("ellisID", "datasetid")],
by.x="datasetid", by.y="datasetid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# now get the closest age.
ellisAges = gsub("X", "", colnames(ellisData)[-1])
ellisAges = cbind(substr(ellisAges, 1, nchar(ellisAges)-2),
substr(ellisAges, nchar(ellisAges)-1, nchar(ellisAges)))
ellisAges = ifelse(ellisAges[,2] == "BC",
as.numeric(ellisAges[,1]) + 1950,
1950 - as.numeric(ellisAges[,1]))
#Adding 750 years so we get max density across the "persistence window"
rDataEllisCols = sapply(rData$age, function(x){
which.min(abs((x - 750) - ellisAges))
})
rData$ellisCat = ellisData[cbind(rData$ellisID,rDataEllisCols)]
# now grab metadata from table with pop density etc, and look for trends
# in tp1 based on these cats.
rData = merge(rData, ellisCat, by.x = "ellisCat", by.y="ellisID",
all.x=TRUE, all.y=FALSE, sort=FALSE)
rData$ellisDensRegion = as.factor(paste0(rData$REGION, ":", rData$ellisPopDens))
rData$ellisPopNum = rData$ellisPopDens
rData$ellisPopDens = as.factor(rData$ellisPopDens)
rData = rData[complete.cases(rData[,c("age", "lat", "popDens", "ellisPopDens")]),]
rData = droplevels(rData[rData$lat > 25, ])
rData$logDensS = as.vector(scale(log(rData$popDens+1)))
rData$ageS = as.vector(scale(rData$age))
rData$latS = as.vector(scale(rData$lat))
tsPopChange = tapply(as.numeric(as.character(rData$ellisPopDens)), rData$datasetid, range)
tsDS = names(tsPopChange)
tsPopChange = do.call("rbind", tsPopChange)
rownames(tsPopChange) = tsDS
tsPopSplit = split(as.data.frame(tsPopChange), f=rData$REGION[match(rownames(tsPopChange), rData$datasetid)])
table(tsPopSplit[[1]][,1], tsPopSplit[[1]][,2])
table(tsPopSplit[[2]][,1], tsPopSplit[[2]][,2])
sum(tsPopSplit[[2]][,1] < tsPopSplit[[2]][,2]) / nrow(tsPopSplit[[2]])
#           ellis exploration ####
contCol = c("blue","darkgreen")
contAlpha = col2rgb(contCol)/255
contAlpha = apply(contAlpha, 2, function(x){rgb(x[1],x[2],x[3],0.25)})
# consistent vs changing time series
a = table(cut(rData$age, breaks=seq(0,8000,1000)), rData$ellisPopDens, rData$REGION)
#a = tapply(rData$ellisPopDens, rData$datasetid, function(x){length(unique(x))})
barplot(t(prop.table(a[,,1], 1)))
barplot(t(prop.table(a[,,2], 1)))
# modern pop versus historical pop categories
boxplot(log(rData$popDens+1) ~ rData$ellisPopDen * rData$REGION,
col=c(rep("blue", 5), rep("darkgreen", 5)), yaxt="n", xlab="", ylab="")
axis(side=2, at=log(c(0, 1,10,100,1000,10000)+1), labels=c(0,1,10,100,1000,10000), las=1)
axis(side=2, at=log(c(seq(1,10,1), seq(10,100,10), seq(100,1000,100), seq(1000,10000,1000))),
labels=NA, tcl=-0.125)
mtext(side=2, line=2, text=expression("Population density at 2000AD (persons km"^-2*")"))
# test for modern pop ability to explain historical prop
rData$ellisPopNum <- as.numeric(as.character(rData$ellisPopDens))
histPopM <- lmer(log(ellisPopNum+1) ~ log(popDens+1) * REGION + (1|datasetid), data=rData)
performance(histPopM)
summary(histPopM)
saveRDS(rData, "./outputs/holoDataGenus.rds")
# ellis pop dens as proportions across Holocene
ellisEurope = st_crop(ellis, st_bbox(c(xmin=Eu[3], xmax=Eu[4], ymin=Eu[1], ymax=Eu[2]), crs=st_crs(4326)))
ellisNthAm = st_crop(ellis, st_bbox(c(xmin=nthAm[3], xmax=nthAm[4], ymin=nthAm[1], ymax=nthAm[2]), crs=st_crs(4326)))
# pull out and aggregate ellis data for each 1000 years
ellisDataEurope = ellisData[match(ellisEurope$id, ellisData$id),]
ellisDataNthAm = ellisData[match(ellisNthAm$id, ellisData$id),]
# now aggregate data for each time aggregate (thousand years?)
ellisColsCut = as.factor(round(ellisAges, -2))
ellisFullDens = do.call("rbind", lapply(unique(ellisColsCut), function(n){
a = ellisDataEurope[,-1][,ellisColsCut == n & !is.na(ellisColsCut)]
if(class(a) == "data.frame"){
a = unlist(a)
}
aDens = factor(ellisCat$ellisPopDens[match(a, ellisCat$ellisID)], levels=unique(ellisCat$ellisPopDens))
aDens = table(aDens) / length(aDens)
b = ellisDataNthAm[,-1][,ellisColsCut == n & !is.na(ellisColsCut)]
if(class(b) == "data.frame"){
b = unlist(b)
}
bDens = factor(ellisCat$ellisPopDens[match(b, ellisCat$ellisID)], levels=unique(ellisCat$ellisPopDens))
bDens = table(bDens) / length(bDens)
return(data.frame(REGION = rep(c("Europe", "North America"), each = length(aDens)),
time = n,
popCat = rep(names(aDens), 2),
popDens = c(aDens, bDens)))
}))
#           Model ####
# remove missing pop dens & very low sampled high pop dens categories
rModel = droplevels(rData[!is.na(rData$ellisPopDens) & rData$ellisPopDens != "2500",])
tempA = gamm4(tpPC1 ~ s(ageS, k = 12, by=ellisDensRegion) + ellisPopDens + REGION * latS, data=rModel,
random = ~(1|datasetid))
predDF = cbind(expand.grid(ageS = seq(min(rData$ageS, na.rm=TRUE), max(rData$ageS, na.rm=TRUE), len=1000),
ellisDensRegion = sort(unique(rModel$ellisDensRegion))),
latS = 0,
tempPred = 0)
regCats = do.call('rbind', strsplit(as.character(predDF$ellisDensRegion), ":"))
colnames(regCats) = c("REGION", "ellisPopDens")
predDF = cbind(predDF, regCats)
predDF = cbind(predDF, as.data.frame(predict(tempA$gam, newdata=predDF, se.fit=TRUE)))
predDF$age = predDF$ageS * sd(rData$age, na.rm=TRUE) + mean(rData$age, na.rm=TRUE)
predDF = predDF[predDF$age <= 12000,]
gradientCutoff = floor(0.005 * length(unique(rData$datasetid)))
europePopSamplingLims = sapply(split(rData[rData$REGION == "Europe",],
f=rData$ellisPopDens[rData$REGION == "Europe"]),function(x){
sort(tapply(x$age, x$datasetid, max), decreasing=TRUE)[gradientCutoff]
})
AmpopSamplingLims = sapply(split(rData[rData$REGION == "North America",],
f=rData$ellisPopDens[rData$REGION == "North America"]),function(x){
sort(tapply(x$age, x$datasetid, max), decreasing=TRUE)[gradientCutoff]
})
#           Plot ####
library(pBrackets)
pdf("./plots/holoceneLineFamily.pdf", height=6, width=11, useDingbats=FALSE)
par(mar=c(0,0,0,0), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)
split.screen(rbind(c(0.12,0.535,0.3,0.95),
c(0.575,0.99,0.3,0.95),
c(0.12,0.535,0.1,0.3), # population densities
c(0.575,0.99,0.1,0.3),
c(0.88, 0.92, 0.325, 0.5))) # pop dens gradient
# try a linear plot instead of a surface plot
screen(1)
plot(NULL, xlim=c(12200,0), xlab="", ylab="", xaxt="n", xaxs="i", ylim=c(-0.3,0.2))  #ylim=c(-1.65,1)
abline(h=0, lty="31")
axis(side=1, at=seq(0,12000,2000), labels=NA)
mtext(side=2, line=4, text="Assemblage persistence PC1", las=0)
mtext(side=3, line=0, at=par('usr')[1], text="Europe", font=2,col="blue", adj=0)
par(xpd=NA)
arrowLabs = c("More\ntransient", "More\npersistent")
Arrows(y0=0, y1= 0 + c(-0.15, 0.15),
x0=relative.axis.point(-0.12, "x"), x1=relative.axis.point(-0.12, "x"),
arr.type="triangle", col="black", arr.width=0.1, arr.length=0.1, lwd=2)
text(y=0 + c(-0.15, 0.15), x=relative.axis.point(-0.12, "x"),
pos=c(1,3), adj=0,
labels=arrowLabs,
font=3, col="black", cex=0.8)
par(xpd=FALSE)
europeCols = c(colorRampPalette(c("grey70", "blue"))(5)[-1], "darkblue")
x = split(predDF[grepl("Europe", predDF$ellisDensRegion),], f=predDF$ellisDensRegion[grepl("Europe", predDF$ellisDensRegion)])
x = x[sapply(x, nrow) > 0]
mapply(y=x, n=seq_along(x), function(y,n){
y = y[y$age <= europePopSamplingLims[n],]
colrgb = col2rgb(europeCols[n])/255
polygon(x=c(y$age, rev(y$age)),
y=c(y$fit + 1.96 * y$se.fit, rev(y$fit - 1.96 * y$se.fit)),
border=NA, col=rgb(colrgb[1],colrgb[2],colrgb[3],0.25))
lines(y$fit ~ y$age, col=europeCols[n], lwd=2, lty=ifelse(n==1, "31", "solid"))
text(x=y$age[1], y=y$fit[1], labels=c("0","<1","<10","<100", ">100")[n],
col=europeCols[n], pos=4, offset=0.2)
})
# add in 2500 cat as individual non-modelled point
points(x=750, y=mean(rData$tpPC1[rData$ellisDensRegion == "Europe:2500"]),
pch=16, col="darkblue")
text(x=750, y=mean(rData$tpPC1[rData$ellisDensRegion == "Europe:2500"]),
labels=">100*", col="darkblue", pos=2, offset=0.2)
#brackets(x2=max(x[[1]]$age), x1=8800, y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.15, type=1)
#segments(x0=8800, x1=8800, y0=relative.axis.point(0.75, "y"), y1=x[[2]]$fit[which.min(abs(8800-x[[2]]$age))], lty="dotted")
#par(lheight=0.8)
#text(x=mean(c(max(x[[1]]$age), 8800)), y=relative.axis.point(0.87, "y"), labels="(1) Increased\npersistence with\nhuman presence", font=3, adj=0.5)
brackets(x2=max(x[[1]]$age), x1=europePopSamplingLims[4], y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.03, type=1)
segments(x0=max(x[[1]]$age), x1=max(x[[1]]$age), y0=relative.axis.point(0.75, "y"), y1=x[[2]]$fit[which.max(x[[2]]$age)], lty="dotted")
segments(x0=europePopSamplingLims[4], x1=europePopSamplingLims[4], y0=relative.axis.point(0.75, "y"), y1=x[[4]]$fit[which.min(abs(europePopSamplingLims[4]-x[[4]]$age))], lty="dotted")
text(x=mean(c(max(x[[1]]$age), 2500)), y=relative.axis.point(0.87, "y"), labels="(0) Human presence\nhas no detectable\npersistence signal", font=3, adj=0.5)
brackets(x2=europePopSamplingLims[4], x1=min(x[[1]]$age), y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.03, type=1)
segments(x0=min(x[[1]]$age), x1=min(x[[1]]$age), y0=relative.axis.point(0.75, "y"), y1=x[[4]]$fit[which.min(x[[4]]$age)], lty="dotted")
text(x=mean(c(min(x[[1]]$age), europePopSamplingLims[4])), y=relative.axis.point(0.87, "y"), labels="(-) Decreased\npersistence with\nhuman presence", font=3, adj=0.5)
text(x=relative.axis.point(0.01, "x"), y=relative.axis.point(0.975, "y"),
adj=0, labels="(A)", font=2)
close.screen(1)
screen(2)
plot(NULL, xlim=c(12200,0), xlab="", ylab="", xaxt="n", xaxs="i", ylim=c(-0.3,0.3)) #ylim=c(-1.25,1.75)
abline(h=0, lty="31")
axis(side=1, at=seq(0,12000,2000), labels=NA)
mtext(side=3, line=0, at=par('usr')[1], text="North America", font=2,col="darkgreen", adj=0)
# lines(tempPred[,2] ~ tempPred[,1], col="red")
amCols = c(colorRampPalette(c("grey70", "darkgreen"))(5)[-1], "#003000FF")
x = split(predDF[grepl("North America", predDF$ellisDensRegion),], f=predDF$ellisDensRegion[grepl("North America", predDF$ellisDensRegion)])
x = x[sapply(x, nrow) > 0]
mapply(y=x, n=seq_along(x), function(y,n){
y = y[y$age <= AmpopSamplingLims[n],]
colrgb = col2rgb(amCols[n])/255
polygon(x=c(y$age, rev(y$age)),
y=c(y$fit + 1.96 * y$se.fit, rev(y$fit - 1.96 * y$se.fit)),
border=NA, col=rgb(colrgb[1],colrgb[2],colrgb[3],0.25), lwd=0.5)
lines(y$fit ~ y$age, col=amCols[n], lwd=2, lty=ifelse(n==1, "31", "solid"))
text(x=y$age[1], y=y$fit[1], labels=c("0","<1","<10","<100", ">100")[n],
col=amCols[n], pos=4, offset=0.2)
})
brackets(x2=max(x[[1]]$age), x1=9400, y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.03, type=1)
segments(x0=max(x[[1]]$age), x1=max(x[[1]]$age), y0=relative.axis.point(0.75, "y"), y1=x[[2]]$fit[which.max(x[[2]]$age)], lty="dotted")
segments(x0=9400, x1=9400, y0=relative.axis.point(0.75, "y"), y1=x[[2]]$fit[which.min(abs(9400-x[[2]]$age))], lty="dotted")
par(lheight=0.8)
text(x=mean(c(max(x[[1]]$age), 9400)), y=relative.axis.point(0.87, "y"), labels="(0) Human presence\nhas no detectable\npersistence signal", adj=0.5, font=3)
brackets(x2=9400, x1=5400, y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.03, type=1)
segments(x0=5400, x1=5400, y0=relative.axis.point(0.75, "y"), y1=x[[2]]$fit[which.min(abs(5400-x[[2]]$age))], lty="dotted")
par(lheight=0.8)
text(x=mean(c(max(x[[1]]$age), 5400)), y=relative.axis.point(0.87, "y"), labels="(+) Increased\npersistence with\nhuman presence", adj=0.5, font=3)
brackets(x2=5400, x1=min(x[[1]]$age), y1=relative.axis.point(0.75, "y"), y2 = relative.axis.point(0.75, "y"), h=0.03, type=1)
segments(x0=min(x[[1]]$age), x1=min(x[[1]]$age), y0=relative.axis.point(0.75, "y"), y1=x[[4]]$fit[which.min(x[[4]]$age)], lty="dotted")
text(x=mean(c(min(x[[1]]$age), 5400)), y=relative.axis.point(0.87, "y"), labels="(0) Human presence\nhas no detectable\npersistence signal", font=3, adj=0.5)
text(x=relative.axis.point(0.01, "x"), y=relative.axis.point(0.975, "y"),
adj=0, labels="(B)", font=2)
close.screen(2)
screen(3)
# unsampled windows of higher density human populations
plot(NULL, xlim=c(12200, 0), ylim=c(0,1), axes=FALSE, xlab="", ylab="", yaxs="i", xaxs="i")
axis(side=1, at=seq(2000,11500,2000), tcl=-0.25,
labels=format(seq(2000,11500,2000), big.mark=","), mgp=c(3,0.2,0))
axis(side=1, at=0, labels=0, mgp=c(3,0.2,0))
axis(side=1, at=seq(0,12000,1000), tcl=-0.125, labels=NA)
mtext(side=1, line=1.25, text="Years before present")
axis(side=2, at=seq(0,1,0.2))
mtext(side=2, line=4, text="Human population density", las=0, lheight=0.75)
mtext(side=2, line=2.5, text="(Proportion of\ncontinental area)", las=0, lheight=0.75, font=3)
# europe pop dens
ellisEurWide = ellisFullDens[ellisFullDens$REGION=="Europe",]
ellisEurWide = as.data.frame(pivot_wider(ellisEurWide[,-1], values_from="popDens", names_from="popCat"))
ellisEurWide[,"2500"] = rowSums(ellisEurWide[,c("2500","5000")])
rownames(ellisEurWide) = ellisEurWide[,1]
ellisEurWide = ellisEurWide[,!colnames(ellisEurWide) %in% c("time", "5000")]
ellisEurWide = ellisEurWide[,ncol(ellisEurWide):1]
europeEllisPlot = rbind(0, apply(ellisEurWide, 1, cumsum))
europeCols = c(colorRampPalette(c("grey70", "blue"))(5)[-1], "darkblue")
sapply(2:(nrow(europeEllisPlot)), function(n){
print(n)
polygon(x=c(as.numeric(colnames(europeEllisPlot)),
rev(as.numeric(colnames(europeEllisPlot)))),
y=c(europeEllisPlot[n-1,], rev(europeEllisPlot[n,])),
col=europeCols[n-1])
})
sapply(1:ncol(ellisEurWide), function(n){
labX = weighted.mean(as.numeric(rownames(ellisEurWide)), ellisEurWide[,n])
labY = mean(europeEllisPlot[,which.min(abs(as.numeric(rownames(ellisEurWide)) - labX))][n:(n+1)])
text(x=labX, y=labY, label=c("0", "<1", "<10", "<100")[n],
col=c("black","black","white","white")[n], cex=0.75)
})
box()
text(x=relative.axis.point(0.01, "x"), y=relative.axis.point(0.925, "y"),
adj=0, labels="(C)", font=2)
axis(side=3, at=seq(0,12000,2000), tcl=0.25, labels=NA)
axis(side=3, at=seq(0,12000,1000), tcl=0.125, labels=NA)
close.screen(3)
screen(4)
# unsampled windows of higher density human populations
plot(NULL, xlim=c(12200, 0), ylim=c(0,1), axes=FALSE, xlab="", ylab="", yaxs="i", xaxs="i")
axis(side=1, at=seq(2000,11500,2000), tcl=-0.25,
labels=format(seq(2000,11500,2000), big.mark=","), mgp=c(3,0.2,0))
axis(side=1, at=seq(0,12000,1000), tcl=-0.125, labels=NA)
axis(side=1, at=0, labels=0, mgp=c(3,0.2,0))
mtext(side=1, line=1.25, text="Years before present")
axis(side=2, at=seq(0,1,0.2))
# europe pop dens
ellisEurWide = ellisFullDens[ellisFullDens$REGION=="North America",]
ellisEurWide = as.data.frame(pivot_wider(ellisEurWide[,-1], values_from="popDens", names_from="popCat"))
ellisEurWide[,"2500"] = rowSums(ellisEurWide[,c("2500","5000")])
rownames(ellisEurWide) = ellisEurWide[,1]
ellisEurWide = ellisEurWide[,!colnames(ellisEurWide) %in% c("time", "5000")]
ellisEurWide = ellisEurWide[,ncol(ellisEurWide):1]
europeEllisPlot = rbind(0, apply(ellisEurWide, 1, cumsum))
europeCols = c(colorRampPalette(c("grey70", "darkgreen"))(5)[-1], "#003000FF")
sapply(2:(nrow(europeEllisPlot)), function(n){
print(n)
polygon(x=c(as.numeric(colnames(europeEllisPlot)),
rev(as.numeric(colnames(europeEllisPlot)))),
y=c(europeEllisPlot[n-1,], rev(europeEllisPlot[n,])),
col=europeCols[n-1])
})
sapply(1:ncol(ellisEurWide), function(n){
labX = weighted.mean(as.numeric(rownames(ellisEurWide)), ellisEurWide[,n])
labY = mean(europeEllisPlot[,which.min(abs(as.numeric(rownames(ellisEurWide)) - labX))][n:(n+1)])
text(x=labX, y=labY, label=c("0", "<1", "<10", "<100")[n],
col=c("black","black","white","white")[n], cex=0.75)
})
box()
text(x=relative.axis.point(0.01, "x"), y=relative.axis.point(0.925, "y"),
adj=0, labels="(D)", font=2)
axis(side=3, at=seq(0,12000,2000), tcl=0.25, labels=NA)
axis(side=3, at=seq(0,12000,1000), tcl=0.125, labels=NA)
close.screen(4)
screen(5)
image(y=seq(0,1,len=5),
x=c(0,1),
z=matrix(1:10, byrow=TRUE, nrow=2),
col=c(c(colorRampPalette(c("grey70", "blue"))(5)[-1], "darkblue"),
c(colorRampPalette(c("grey70", "darkgreen"))(5)[-1], "#003000FF")),
useRaster=TRUE, axes=FALSE, xlab="", ylab="")
axis(side=2, mgp=c(3,0.5,0), at=seq(0,1,len=5),
labels=c("0", "<1",  "<10", "<100", ">100"))
abline(v=0.5,)
box()
mtext(side=2, line=3.25, text="Pop density", las=0)
mtext(side=2, line=2.25, text=expression("(persons km"^-2*")"), las=0)
close.screen(5)
close.screen(all.screens=TRUE)
dev.off()
citation("calibrate")
citation("calibrate")
library(calibrate)
?calibrate
citation("rice")
print(citation("rice"), bibtex=TRUE)
citation("terra")
citation("pBrackets")
citation("RRatepol")
gradientCutoff = floor(0.005 * length(unique(rData$datasetid)))
gradientCutoff
########################### ####
rData <- readRDS("./outputs/recentTrajectoryDataGenus.rds")
rDatasetID = rData[!duplicated(rData$datasetid),]
# run persistence PCA
testTPMat = rData[, grepl("dn1", colnames(rData))]
testTPMat = testTPMat[, 1:3]
rData = rData[complete.cases(testTPMat),]
testTPMat = testTPMat[complete.cases(testTPMat),]
#tpResPCA = princomp(sapply(testTPMat, function(x){logit(beta.tr(x))}))
tpResPCA = princomp(sapply(testTPMat, function(x){x}))
tpVals = tpResPCA$sdev^2 / sum(tpResPCA$sdev^2)
# reverse first axis if loadings are positive so higher values = more persistent
if(sum(tpResPCA$loadings[,1] > 0) == ncol(testTPMat)){
tpResPCA$scores[,1] = tpResPCA$scores[,1] * -1
tpResPCA$loadings[,1] = tpResPCA$loadings[,1] * -1
}
# reverse second axis if late time dissimilarities are positive so
# higher values = more late persistence, reflecting of an "attractor state"
if(tpResPCA$loadings[1,2] < 0 & tpResPCA$loadings[3,2] > 0 ){
tpResPCA$scores[,2] = tpResPCA$scores[,2] * -1
tpResPCA$loadings[,2] = tpResPCA$loadings[,2] * -1
}
print(tpResPCA$loadings)
tpComb = data.frame(tpPC1 = tpResPCA$scores[,1],
tpPC2 = tpResPCA$scores[,2])
rData = cbind(rData, tpComb)
gradientCutoff = floor(0.005 * length(unique(rData$datasetid)))
gradientCutoff
?lda
?LDA
